---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 千古
--- DateTime: 2022/9/10 23:14
---

local PTMainFrame				= nil
local Tab1Frame				= nil
local columnCount			= 0
local PTScrollFrame		= nil
local PTScrollButtons	= {}
local PTScrollIndex		= {}
local PTScrollType		= 0
local PTScrollSelect	= 0
local WINDOW_WIDTH			= 934
local WINDOW_HEIGHT			= 400
local WINDOW_OFFSET			= 113
local BUTTON_HEIGHT			= 20
local BUTTON_TOTAL			= math.floor((WINDOW_HEIGHT - WINDOW_OFFSET) / BUTTON_HEIGHT)
local BUTTON_WIDTH			= WINDOW_WIDTH - 44
local COL_NAME				= 110
local COL_BNET				= 130
local COL_SERVER			= 110
local COL_CURRENT			= 110
local COL_DATE				= 150
local COL_NOTES				= 341
local COL_INFOTEXT			= 400
local input_1               = nil
local input_2               = nil
local input_3               = nil
local search                = nil
local searchName            = ""
local searchTag             = ""
local searchCurrentRol      = ""
local searchPlayNameNeed    = false
local searchTagNameNeed     = false
local searchCurrentRolNeed  = false



local currentBnetRole       = {}


--警告框
StaticPopupDialogs["PTT_PARTYWARN"] = {

    preferredIndex	= STATICPOPUPS_NUMDIALOGS,
    text			= "|cffffff00警告：\n\n|cffffffff该团队有 |cffffff00%d |cffffffff名玩家存在负面标记:\n|cff69CCF0%s\n",
    button1			= "知道了",
    timeout         = 15,
    whileDead		= true,
    hideOnEscape	= true,
}




---------------------
-- BUILD UI FRAMES --
---------------------






--更新列表
local function PTListDrawUpdate (self)

    local searchPlayerList={}
    local searchPTScrollIndex={}
    if searchPlayNameNeed then
        for index,playName in pairs(PlayTagDB.playerList) do

            if string.find(string.lower(playName),searchName) then
                table.insert(searchPlayerList,playName)
            end

        end
    else
        for k ,v in pairs(PlayTagDB.playerList) do
            table.insert(searchPlayerList,v)
        end

    end

    if searchTagNameNeed then
        for playName,playTag in pairs(PlayTagDB.playTagMap) do

            local needRemoveIndex = nil
            if not string.find(string.lower(playTag),searchTag) then

                for k,v in pairs(searchPlayerList) do

                    if playName==v then
                        needRemoveIndex=k
                    end


                end

            end

            if needRemoveIndex then
                table.remove(searchPlayerList,needRemoveIndex)
            end
        end

    end


    if searchCurrentRolNeed then

        --print("jinru")

        local needRemoveIndex = nil
        --searchCurrentRol

        --print(searchPlayerList)

        for k,v in pairs(searchPlayerList) do

            --print(k,v)

            if not currentBnetRole[PlayTagDB.playerBnetMap[v]] then
                needRemoveIndex=k
            elseif searchCurrentRol ~= currentBnetRole[PlayTagDB.playerBnetMap[v]] then
                needRemoveIndex=k
            end
        end



        if needRemoveIndex then
            table.remove(searchPlayerList,needRemoveIndex)
        end


    end





    if searchTagNameNeed or searchPlayNameNeed or searchCurrentRolNeed then

        for k,v in pairs(PTScrollIndex) do

            for k2,v2 in pairs(searchPlayerList) do

                if v2==PlayTagDB.playerList[v] then
                    table.insert(searchPTScrollIndex,k2)
                end

            end
        end
    else
        searchPTScrollIndex=PTScrollIndex
    end

    --print(#PlayTagDB.playerList,#searchPlayerList,#searchPTScrollIndex)


    local playerCount =#searchPlayerList
    FauxScrollFrame_Update(self,#searchPlayerList , BUTTON_TOTAL, BUTTON_HEIGHT)

    --if PTScrollSelect > playerCount then
    --    PTScrollSelect = playerCount
    --end

    Tab1Frame.infotext:SetText(format("标记数量：|cffffff00%d", playerCount))

    local offset  = FauxScrollFrame_GetOffset(self)
    local index   = 0
    local id      = 0
    local pName   = ""
    local pServer = ""
    local pDate   = ""
    local pNotes  = ""
    local temp    = 0
    local pBnet   = ""
    local pCurrent =""


    for count = 1, BUTTON_TOTAL do
        id = count + offset

        if id <= playerCount then
            if searchPTScrollIndex[id] then
                index = searchPTScrollIndex[id]
            else
                return
            end


            --print(count,id,index,searchPlayerList[index])

            pName = searchPlayerList[index]
            pDate = PlayTagDB.playerDateMap[pName]
            pNotes = PlayTagDB.playTagMap[pName]
            temp  = string.find(pName, "-", 1, true)


            if temp then
                pServer = string.sub(pName, temp + 1, string.len(pName))
                pName   = string.sub(pName, 1, temp - 1)
            else
                pServer = "All"
            end





            --print(PlayTagDB.bnetPlayerMap)
            --print(PlayTagDB.playerBnetMap[addServer(pName)])
            if  PlayTagDB.playerBnetMap[addServer(pName)] then
                pBnet=string.gsub(PlayTagDB.playerBnetMap[addServer(pName)],"#.*","")
            else
                pBnet=""
            end

            --print(pBnet)
            --print(currentBnetRole[PlayTagDB.playerBnetMap[addServer(pName)]])
            if pBnet ~="" then

                if currentBnetRole[PlayTagDB.playerBnetMap[addServer(pName)]] then
                    if currentBnetRole[PlayTagDB.playerBnetMap[addServer(pName)]] == "" then
                        pCurrent=""
                    else
                        pCurrent=currentBnetRole[PlayTagDB.playerBnetMap[addServer(pName)]]

                    end
                else

                    pCurrent=""
                end
            else
                pCurrent=""
            end




            PTScrollButtons[count].name:SetText(pName)
            PTScrollButtons[count].bnet:SetText("|cff69CCF0"..pBnet)
            PTScrollButtons[count].current:SetText(pCurrent)
            PTScrollButtons[count].date:SetText(pDate)
            PTScrollButtons[count].note:SetText("|cff69CCF0"..pNotes)

            PTScrollButtons[count]:SetID(id)

            if PTScrollSelect == id then
                PTScrollButtons[count]:LockHighlight()
            else
                PTScrollButtons[count]:UnlockHighlight()
            end

            PTScrollButtons[count]:Show()
            else
            PTScrollButtons[count]:Hide()
            end
        end
end






--编辑标签框
--StaticPopupDialogs["PTT_EDIT_TAG"] = {
--
--    preferredIndex = STATICPOPUPS_NUMDIALOGS,
--    text           = "编辑标签： |cffffff00%s",
--    maxLetters     = 27,
--    hasEditBox	   = 1,
--    editBoxWidth   = 350,
--    whileDead      = 1,
--    button1        = "保存",
--    button2        = "取消",
--
--    OnShow = function(self)
--        --print("。。。。。"..self.text["text_arg1"])
--
--        if PTTSystemTagList[addServer(self.text["text_arg1"])] and not PTTSystemTagList[addServer(GetUnitName("player"))] then
--            ShowMsg("千古提示：你无法对 "..self.text["text_arg1"].." 添加标签")
--            self:Hide()
--        elseif PlayTagDB.playTagMap[addServer(self.text["text_arg1"])] then
--            self.editBox:SetText(PlayTagDB.playTagMap[addServer(self.text["text_arg1"])])
--        else
--            self.editBox:SetText("")
--
--        end
--        self.editBox:SetFocus()
--
--    end,
--    OnAccept = function(self)
--        if not PlayTagDB.playTagMap[addServer(self.text["text_arg1"])] then
--            table.insert(PlayTagDB.playerList,addServer(self.text["text_arg1"]))
--        end
--        PlayTagDB.playTagMap[addServer(self.text["text_arg1"])] = self.editBox:GetText()
--        --print(addServer(self.text["text_arg1"]).."    "..date("%Y-%m-%d %H:%M:%S"))
--
--        PlayTagDB.playerDateMap[addServer(self.text["text_arg1"])]=date("%Y-%m-%d %H:%M:%S")
--        --貌似是列表界面更新
--        PTListDrawUpdate(PTScrollFrame)
--    end,
--    EditBoxOnEnterPressed = function(self)
--        --local tmpname = self:GetParent().editBox:GetText()
--        if not PlayTagDB.playTagMap[addServer(self:GetParent().text["text_arg1"])] then
--            table.insert(PlayTagDB.playerList,addServer(self:GetParent().text["text_arg1"]))
--        end
--        PlayTagDB.playTagMap[addServer(self:GetParent().text["text_arg1"])] = self:GetParent().editBox:GetText()
--        --print(addServer(self.text["text_arg1"]).."    "..date("%Y-%m-%d %H:%M:%S"))
--        PlayTagDB.playerDateMap[addServer(self:GetParent().text["text_arg1"])]=date("%Y-%m-%d %H:%M:%S")
--        self:GetParent():Hide()
--    end,
--    EditBoxOnEscapePressed = function(self)
--        self:GetParent():Hide()
--    end
--}




local function PlayerRemove(selectName)

    if not selectName or not PlayTagDB.playTagMap[selectName] then

        --print (selectName,PlayTagDB.playTagMap[selectName])

        return
    end

    local playerListIndex=nil

    for i = 1, #PlayTagDB.playerList do
        if PlayTagDB.playerList[i]==selectName then
            playerListIndex=i

        end
    end


    --print(PTScrollSelect,playerListIndex,selectName)

    PlayTagDB.playTagMap[selectName]=nil
    table.remove(PlayTagDB.playerList,playerListIndex)
    PlayTagDB.playerDateMap[selectName]=nil

    table.remove(PTScrollIndex,PTScrollSelect)        --排序号--->playerList索引   playerList删除，索引要减1
    for index=1,#PlayTagDB.playerList  do
        if PTScrollIndex[index] > playerListIndex then
            PTScrollIndex[index]=PTScrollIndex[index]-1
        end
    end


    PTListDrawUpdate(PTScrollFrame)
end




--列表页面双击
local function PTTScrollClick(self, button, down)

    if down == true then return end
    local selectName =""

    if PTScrollSelect == self:GetID() and button == "LeftButton" then

        selectName = self.name:GetText()

        StaticPopup_Show("PTT_EDIT_TAG", selectName)
        --PTListDrawUpdate(PTScrollFrame)
        return
    elseif PTScrollSelect ~= self:GetID() then
        PTScrollSelect = self:GetID()
        PTListDrawUpdate(PTScrollFrame)
    end

    if button == "RightButton" then
        selectName = self.name:GetText()

        local IgnoreRightClickMenu = {

            { text = selectName, isTitle = true, notCheckable = true },
            { text = "查看标签", notCheckable = true, func = function() StaticPopup_Show("PTT_EDIT_TAG", selectName) end },
            { text = "", disabled = true, notCheckable = true },
            { text = "删除", notCheckable = true, func = function() PlayerRemove(addServer(selectName)) end },
            { text = "", notCheckable = true, disabled = true },
            { text = "取消", notCheckable = true }
        }

        local menuFrame = CreateFrame("Frame", "GILIgnoreRightClick", UIParent, "UIDropDownMenuTemplate")

        EasyMenu(IgnoreRightClickMenu, menuFrame, "cursor", 0 , 0, "MENU")
    end
end






--每一行数据都是一个 button
local function CreatePTButtons()

    PTScrollButtons = {}

    for count = 1, BUTTON_TOTAL do

        PTScrollButtons[count] = CreateFrame("Button", nil, PTScrollFrame:GetParent(), "FriendsFrameIgnoreButtonTemplate")

        if count == 1 then
            PTScrollButtons[count]:SetPoint("TOPLEFT", PTScrollFrame, -1, 0)
        else
            PTScrollButtons[count]:SetPoint("TOP", PTScrollButtons[count - 1], "BOTTOM")
        end

        PTScrollButtons[count]:SetSize(BUTTON_WIDTH, BUTTON_HEIGHT)
        PTScrollButtons[count]:RegisterForClicks("LeftButtonUp", "RightButtonUp")
        PTScrollButtons[count]:SetScript("OnClick", PTTScrollClick)

        -- 玩家名称
        PTScrollButtons[count].name:SetWidth(COL_NAME)
        --PTScrollButtons[count]:SetScript("OnClick", PTScrollClick)

        -- 玩家战网名称
        PTScrollButtons[count].bnet = PTScrollButtons[count]:CreateFontString("FontString", "OVERLAY", "GameFontHighlight")
        PTScrollButtons[count].bnet:SetPoint("LEFT", PTScrollButtons[count].name, "RIGHT", 0, 0)
        PTScrollButtons[count].bnet:SetWidth(COL_BNET)
        PTScrollButtons[count].bnet:SetJustifyH("LEFT")
        --PTScrollButtons[count].bnet:SetTextScale(0.8)







        -- 服务器 用户处不大，去除，剩余位置增加当前角色
        --PTScrollButtons[count].server = PTScrollButtons[count]:CreateFontString("FontString", "OVERLAY", "GameFontHighlight")
        --PTScrollButtons[count].server:SetPoint("LEFT", PTScrollButtons[count].bnet, "RIGHT", 0, 0)
        --PTScrollButtons[count].server:SetWidth(COL_SERVER)
        --PTScrollButtons[count].server:SetJustifyH("LEFT")
        --PTScrollButtons[count].server:SetTextScale(0.8)
        ----PTScrollButtons[count]:SetScript("OnClick", PTScrollClick)



        -- 战网当前角色
        PTScrollButtons[count].current = PTScrollButtons[count]:CreateFontString("FontString", "OVERLAY", "GameFontHighlight")
        PTScrollButtons[count].current:SetPoint("LEFT", PTScrollButtons[count].bnet, "RIGHT", 0, 0)
        PTScrollButtons[count].current:SetWidth(COL_CURRENT)
        PTScrollButtons[count].current:SetJustifyH("LEFT")
        --PTScrollButtons[count].current:SetTextScale(0.8)
        --PTScrollButtons[count]:SetScript("OnClick", PTScrollClick)





        -- 更新时间
        PTScrollButtons[count].date = PTScrollButtons[count]:CreateFontString("FontString", "OVERLAY", "GameFontHighlight")
        PTScrollButtons[count].date:SetPoint("LEFT", PTScrollButtons[count].current, "RIGHT", 0, 0)
        PTScrollButtons[count].date:SetWidth(COL_DATE)
        PTScrollButtons[count].date:SetJustifyH("LEFT")
        PTScrollButtons[count].date:SetTextScale(0.8)
        --PTScrollButtons[count]:SetScript("OnClick", PTScrollClick)

        ---- create listed style
        --PTScrollButtons[count].listed = PTScrollButtons[count]:CreateFontString("FontString", "OVERLAY", "GameFontHighlight")
        --PTScrollButtons[count].listed:SetPoint("LEFT", PTScrollButtons[count].type, "RIGHT", -17, 0)
        --PTScrollButtons[count].listed:SetWidth(COL_LISTED)
        --PTScrollButtons[count].listed:SetJustifyH("RIGHT")
        --
        ---- create expire style
        --PTScrollButtons[count].expire = PTScrollButtons[count]:CreateFontString("FontString", "OVERLAY", "GameFontHighlight")
        --PTScrollButtons[count].expire:SetPoint("LEFT", PTScrollButtons[count].listed, "RIGHT", 3, 0)
        --PTScrollButtons[count].expire:SetWidth(COL_EXPIRE)
        --PTScrollButtons[count].expire:SetJustifyH("RIGHT")

        -- create note style
        PTScrollButtons[count].note = PTScrollButtons[count]:CreateFontString("FontString", "OVERLAY", "GameFontHighlight")
        PTScrollButtons[count].note:SetPoint("LEFT", PTScrollButtons[count].date, "RIGHT", 13, 0)
        PTScrollButtons[count].note:SetWidth(COL_NOTES)
        PTScrollButtons[count].note:SetJustifyH("LEFT")
        PTScrollButtons[count].note:SetWordWrap(false)
    end

    PTListDrawUpdate(PTScrollFrame)
end



local function elementServer (num)

    return getServer(PlayTagDB.playerList[num])
end


local function createSortedIndex (sortType)   --排序排的就是 PTScrollIndex，排的是索引，根据索引找数据

    needSorted			= false
    PTScrollIndex	= {}
    PTScrollType	= sortType




    for count = 1, #PlayTagDB.playerList do
        PTScrollIndex[count] = count
    end

    -- should I make one of these for each sortType for performance reasons?
    table.sort(PTScrollIndex,
            function (a,b)
                if sortType == 1 then   --名称倒序
                    -- sort by name column only
                    return PlayTagDB.playerList[a] < PlayTagDB.playerList[b]
                elseif sortType == 2 then  --名称正序
                    return PlayTagDB.playerList[a] > PlayTagDB.playerList[b]
                elseif sortType == 3 then  --当前角色倒序
                    local SA =""
                    local SB=""
                    if(currentBnetRole[PlayTagDB.playerBnetMap[PlayTagDB.playerList[a]]]) then
                        SA=currentBnetRole[PlayTagDB.playerBnetMap[PlayTagDB.playerList[a]]]

                    end
                    if currentBnetRole[PlayTagDB.playerBnetMap[PlayTagDB.playerList[b]]] then
                        SB = currentBnetRole[PlayTagDB.playerBnetMap[PlayTagDB.playerList[b]]]
                    end

                    if SA == "" then SA = string.char(255) end
                    if SB == "" then SB = string.char(255) end

                    if SA < SB then
                        return true
                    elseif SA > SB then
                        return false
                    elseif SA == SB then
                        return PlayTagDB.playerList[a] < PlayTagDB.playerList[b]
                    end
                elseif sortType == 4 then    --当前角色正序
                    local SA =""
                    local SB=""
                    if(currentBnetRole[PlayTagDB.playerBnetMap[PlayTagDB.playerList[a]]]) then
                        SA=currentBnetRole[PlayTagDB.playerBnetMap[PlayTagDB.playerList[a]]]

                    end
                    if currentBnetRole[PlayTagDB.playerBnetMap[PlayTagDB.playerList[b]]] then
                        SB = currentBnetRole[PlayTagDB.playerBnetMap[PlayTagDB.playerList[b]]]
                    end

                    if SA == "" then SA = string.char(255) end
                    if SB == "" then SB = string.char(255) end

                    if SA > SB then
                        return true
                    elseif SA < SB then
                        return false
                    elseif SA == SB then
                        return PlayTagDB.playerList[a] < PlayTagDB.playerList[b]
                    end
                elseif sortType == 5 then    --日期倒序
                    local SA = PlayTagDB.playerDateMap[PlayTagDB.playerList[a]]
                    local SB = PlayTagDB.playerDateMap[PlayTagDB.playerList[b]]

                    if SA < SB then
                        return true
                    elseif SA > SB then
                        return false
                    elseif SA == SB then
                        return PlayTagDB.playerList[a] < PlayTagDB.playerList[b]
                    end
                elseif sortType == 6 then     --日期正序
                    local SA = PlayTagDB.playerDateMap[PlayTagDB.playerList[a]]
                    local SB = PlayTagDB.playerDateMap[PlayTagDB.playerList[b]]

                    if SA > SB then
                        return true
                    elseif SA < SB then
                        return false
                    elseif SA == SB then
                        return PlayTagDB.playerList[a] < PlayTagDB.playerList[b]
                    end
                elseif sortType == 7 then      --标记倒序
                    local SA = PlayTagDB.playTagMap[PlayTagDB.playerList[a]]
                    local SB = PlayTagDB.playTagMap[PlayTagDB.playerList[b]]

                    if SA == "" then SA = string.char(255) end
                    if SB == "" then SB = string.char(255) end

                    if SA < SB then
                        return true
                    elseif SA > SB then
                        return false
                    elseif SA == SB then
                        return PlayTagDB.playerList[a] < PlayTagDB.playerList[b]
                    end

                elseif sortType == 8 then     --标记正序
                    local SA = PlayTagDB.playTagMap[PlayTagDB.playerList[a]]
                    local SB = PlayTagDB.playTagMap[PlayTagDB.playerList[b]]

                    if SA == "" then SA = string.char(255) end
                    if SB == "" then SB = string.char(255) end

                    if SA > SB then
                        return true
                    elseif SA < SB then
                        return false
                    elseif SA == SB then
                        return PlayTagDB.playerList[a] < PlayTagDB.playerList[b]
                    end

                elseif sortType == 9 then      --战网倒序
                    local SA =""
                    local SB=""
                    if(PlayTagDB.playerBnetMap[PlayTagDB.playerList[a]]) then
                        SA=PlayTagDB.playerBnetMap[PlayTagDB.playerList[a]]

                    end
                    if PlayTagDB.playerBnetMap[PlayTagDB.playerList[b]] then
                        SB = PlayTagDB.playerBnetMap[PlayTagDB.playerList[b]]
                    end

                    if SA == "" then SA = string.char(255) end
                    if SB == "" then SB = string.char(255) end

                    if SA < SB then
                        return true
                    elseif SA > SB then
                        return false
                    elseif SA == SB then
                        return PlayTagDB.playerList[a] < PlayTagDB.playerList[b]
                    end

                elseif sortType == 10 then     --战网正序
                    local SA =""
                    local SB=""

                    if(PlayTagDB.playerBnetMap[PlayTagDB.playerList[a]]) then
                        SA=PlayTagDB.playerBnetMap[PlayTagDB.playerList[a]]

                    end
                    if PlayTagDB.playerBnetMap[PlayTagDB.playerList[b]] then
                        SB = PlayTagDB.playerBnetMap[PlayTagDB.playerList[b]]
                    end


                    if SA == "" then SA = string.char(255) end
                    if SB == "" then SB = string.char(255) end

                    if SA > SB then
                        return true
                    elseif SA < SB then
                        return false
                    elseif SA == SB then
                        return PlayTagDB.playerList[a] < PlayTagDB.playerList[b]
                    end
                end
            end)

    if (PTScrollFrame ~= nil) then
        PTListDrawUpdate(PTScrollFrame)
    end
end


local function columnClick(self)

    local id = self:GetID()

    if id == 1 then
        if PTScrollType == 1 then    --开始默认0，点一次进esle，初始化为1，1代表正序，正序再点一次进入 if，变量值变为2
            createSortedIndex(2)   --名称倒序

        else
            createSortedIndex(1)   --名称正序

        end
    elseif id==2 then
        if PTScrollType == 9 then    --战网名称
            createSortedIndex(10)   --战网名称倒序

        else
            createSortedIndex(9)   --战网名称正序

        end

    elseif id == 3 then
        if PTScrollType == 3 then
            createSortedIndex(4)    --服务器倒序
        else
            createSortedIndex(3)    --服务器正序
        end
    elseif id ==4 then

        if PTScrollType == 5 then
            createSortedIndex(6)    --时间倒序
        else
            createSortedIndex(5)    --时间倒序
        end
    elseif id == 5 then
        if PTScrollType == 7 then
            createSortedIndex(8)    --标签倒序
        else
            createSortedIndex(7)    --标签正序
        end
    end
end



local function createColumn (text, width, parent)

    local p = _G[parent:GetName() .. "Header1"]

    if p == nil then
        columnCount = 0
    end

    columnCount = columnCount + 1

    local Header = CreateFrame("Button", parent:GetName() .. "Header" .. columnCount, parent, "WhoFrameColumnHeaderTemplate")
    Header:SetWidth(width)
    _G[parent:GetName().."Header"..columnCount.."Middle"]:SetWidth(width - 9)
    Header:SetText(text)
    Header:SetNormalFontObject("GameFontHighlight")
    Header:SetID(columnCount)
    --Header:SetPoint("CENTER", UIParent)

    if columnCount == 1 then
        Header:SetPoint("TOPLEFT", parent, "TOPLEFT", 1, 22)
    else
        Header:SetPoint("LEFT", parent:GetName() .."Header"..columnCount - 1, "RIGHT", 0, 0)
    end

    Header:SetScript("OnClick", columnClick)
end



local function searchClick (playerName,currentRol,playerTag)

    --print(playerName,playerTag)
    if playerName and string.len(string.gsub(string.lower(playerName), '^[%s]*([^%s].*[^%s])[%s]*$', "%1"))>0 then
        searchName=string.gsub(string.lower(playerName), '^[%s]*([^%s].*[^%s])[%s]*$', "%1")
        searchPlayNameNeed=true

    else
        searchName=nil
        searchPlayNameNeed=false
    end

    if currentRol and string.len(string.gsub(string.lower(currentRol), '^[%s]*([^%s].*[^%s])[%s]*$', "%1"))>0 then
        searchCurrentRol=string.gsub(string.lower(currentRol), '^[%s]*([^%s].*[^%s])[%s]*$', "%1")
        searchCurrentRolNeed=true

    else
        searchCurrentRol=nil
        searchCurrentRolNeed=false
    end




    if playerTag and string.len(string.gsub(string.lower(playerTag), '^[%s]*([^%s].*[^%s])[%s]*$', "%1"))>0 then
        searchTag=string.gsub(string.lower(playerTag), '^[%s]*([^%s].*[^%s])[%s]*$', "%1")
        searchTagNameNeed=true
    else
        searchTag=nil
        searchTagNameNeed=false
    end
    --print(searchPlayNameNeed,searchTagNameNeed)

    PTListDrawUpdate(PTScrollFrame)
end





function PTTCreateUIFrames()

    searchPlayNameNeed=false
    searchTagNameNeed=false
    searchCurrentRolNeed=false

    --ToDo：重新排序
    if PTMainFrame ~= nil then
        createSortedIndex(PTScrollType)
        PTMainFrame:Show()
        return
    end

    ----------------
    -- MAIN FRAME --
    ----------------


    --print(11)
    --local frame = CreateFrame("Frame",nil,nil,"BasicFrameTemplateWithInset","ARTWORK1")


    PTMainFrame = CreateFrame("Frame", "PT", UIParent, "PortraitFrameTemplate")



    PTMainFrame:Hide()

    PTMainFrame:SetFrameStrata("DIALOG")
    PTMainFrame:SetWidth(WINDOW_WIDTH)
    PTMainFrame:SetHeight(WINDOW_HEIGHT)
    PTMainFrame:SetPoint("CENTER", UIParent)
    PTMainFrame:SetMovable(true)
    PTMainFrame:EnableMouse(true)
    PTMainFrame:RegisterForDrag("LeftButton", "RightButton")
    PTMainFrame:SetClampedToScreen(true)

    PTMainFrame.title = _G["PTTitleText"]
    PTMainFrame.title:SetText("Private Tailor Tag 玩家标记列表")


    PTMainFrame:SetScript("OnMouseDown",
            function(self)
                self:StartMoving()
                self.isMoving = true
            end)

    PTMainFrame:SetScript("OnMouseUp",
            function (self)
                if self.isMoving then
                    self:StopMovingOrSizing()
                    self.isMoving = false
                end
            end)

    PTMainFrame:SetScript("OnShow",
            function (self)
                --不需要同步
                --if GIL_SyncOK == false then
                --    SyncIgnoreList()
                --end
            end)

    local icon = PTMainFrame:CreateTexture("$parentIcon", "OVERLAY", nil, -8)

    icon:SetSize(60, 60)
    icon:SetPoint("TOPLEFT", -5, 7)
    icon:SetTexture("Interface\\FriendsFrame\\Battlenet-Portrait")

    --table.print_r(PTMainFrame)
    --PTMainFrame:show()

    Tab1Frame = CreateFrame("Frame", "PTFrame1", PTMainFrame, "InsetFrameTemplate")

    Tab1Frame:SetWidth(WINDOW_WIDTH - 19)
    Tab1Frame:SetHeight(WINDOW_HEIGHT - WINDOW_OFFSET)
    Tab1Frame:SetPoint("TOPLEFT", PTMainFrame, "TOPLEFT", 8, -84)

    Tab1Frame:SetScript("OnShow",
            function(self)
                PTListDrawUpdate(PTScrollFrame)  --下面创建 PTScrollFrame
            end)

    createColumn("玩家名称", COL_NAME, Tab1Frame)    --1 名称
    createColumn("战网名称", COL_BNET, Tab1Frame)    --1 职业

    createColumn("战网当前角色", COL_SERVER, Tab1Frame)  --2 服务器
    createColumn("时间", COL_DATE, Tab1Frame)    --3 时间
    --createColumn(PTT_L["COL_4"], COL_LISTED, Tab1Frame)
    --createColumn(PTT_L["COL_5"], COL_EXPIRE, Tab1Frame)
    createColumn("标签内容", COL_NOTES, Tab1Frame)   --4 标签内容
    --createColumn("Alts", 40, Tab1Frame)

    PTScrollFrame = CreateFrame("ScrollFrame", "PTIgnoreScrollFrame", Tab1Frame, "FauxScrollFrameTemplate")

    PTScrollFrame:SetWidth  (WINDOW_WIDTH - 46)
    PTScrollFrame:SetHeight (BUTTON_TOTAL * BUTTON_HEIGHT)
    PTScrollFrame:SetPoint  ("TOPLEFT", 0, -4)





    PTScrollFrame:SetScript("OnVerticalScroll",
            function(self, offset)
                FauxScrollFrame_OnVerticalScroll(self, offset, BUTTON_HEIGHT, PTListDrawUpdate)
            end)

    Tab1Frame.infotext = Tab1Frame:CreateFontString("FontString", "OVERLAY", "GameFontHighlight")

    Tab1Frame.infotext:SetWidth(COL_INFOTEXT)
    Tab1Frame.infotext:SetJustifyH("LEFT")
    Tab1Frame.infotext:SetPoint("TOP", -210, 46)
    Tab1Frame.infotext:SetTextScale(1.2)



    --local Header = CreateFrame("Button", parent:GetName() .. "Header" .. columnCount, parent, "WhoFrameColumnHeaderTemplate")
    --Header:SetWidth(width)
    --_G[parent:GetName().."Header"..columnCount.."Middle"]:SetWidth(width - 9)
    --Header:SetText(text)
    --Header:SetNormalFontObject("GameFontHighlight")
    --Header:SetID(columnCount)
    ----Header:SetPoint("CENTER", UIParent)




    --local input_1_name = CreateFrame("Button", "input_1_name", Tab1Frame, "WhoFrameColumnHeaderTemplate")
    --input_1_name:SetPoint("TOPLEFT", Tab1Frame, "TOPLEFT", 210, 60)
    --input_1_name:SetWidth(200)
    --input_1_name:SetText("输入玩家名称")
    --input_1_name:SetHeight(20)


    input_1 = CreateFrame("EditBox", "input_1", Tab1Frame, "InputBoxTemplate")
    input_1:SetPoint("TOPLEFT", Tab1Frame, "TOPLEFT", 210, 40)
    input_1:SetWidth(120)
    input_1:SetHeight(20)
    input_1:SetAutoFocus(false)
    input_1:SetScript("OnShow",	    function() end)
    input_1:SetScript("OnEnterPressed",  function()  end)
    input_1:SetScript("OnEscapePressed", function() input_1:ClearFocus() end)
    input_1.infotext=input_1:CreateFontString("FontString", "OVERLAY", "GameFontHighlight")
    input_1.infotext:SetWidth(200)
    input_1.infotext:SetJustifyH("LEFT")
    input_1.infotext:SetPoint("TOP", 40, 15)
    input_1.infotext:SetText("输入玩家名称")



    input_2 = CreateFrame("EditBox", "input_2", Tab1Frame, "InputBoxTemplate")
    input_2:SetPoint("TOPLEFT", Tab1Frame, "TOPLEFT", 350, 40)
    input_2:SetWidth(120)
    input_2:SetHeight(20)
    input_2:SetAutoFocus(false)
    input_2:SetScript("OnShow",	    function() end)
    input_2:SetScript("OnEnterPressed",  function()  end)
    input_2:SetScript("OnEscapePressed", function() input_2:ClearFocus() end)
    input_2.infotext=input_2:CreateFontString("FontString", "OVERLAY", "GameFontHighlight")
    input_2.infotext:SetWidth(200)
    input_2.infotext:SetJustifyH("LEFT")
    input_2.infotext:SetPoint("TOP", 40, 15)
    input_2.infotext:SetText("输入战网当前角色")





    input_3 = CreateFrame("EditBox", "input_3", Tab1Frame, "InputBoxTemplate")
    input_3:SetPoint("TOPLEFT", Tab1Frame, "TOPLEFT", 490, 40)
    input_3:SetWidth(200)
    input_3:SetHeight(20)
    input_3:SetAutoFocus(false)
    input_3:SetScript("OnShow",	    function() end)
    input_3:SetScript("OnEnterPressed",  function()  end)
    input_3:SetScript("OnEscapePressed", function() input_3:ClearFocus() end)
    input_3.infotext=input_3:CreateFontString("FontString", "OVERLAY", "GameFontHighlight")
    input_3.infotext:SetWidth(200)
    input_3.infotext:SetJustifyH("LEFT")
    input_3.infotext:SetPoint("TOP", 3, 15)
    input_3.infotext:SetText("输入标签")



    search = CreateFrame("Button", "search", Tab1Frame, "UIPanelButtonTemplate")
    search:SetPoint("TOPLEFT", Tab1Frame, "TOPLEFT", 710, 42)
    search:SetSize(60, 22)
    search:SetText("查询")
    search:SetScript("OnClick", function() searchClick(input_1:GetText(),input_2:GetText(),input_3:GetText())  end)




    --self:SetText(Tab2EditDesc) self:ClearFocus()


    CreatePTButtons()

    local Button = CreateFrame("Button", "GILFrame1IgnoreButton", Tab1Frame, "UIPanelButtonTemplate")

    Button:SetSize(110, 22)
    Button:SetText("添加玩家")
    Button:SetPoint("BOTTOMRIGHT", -1, -24)
    Button:SetScript("OnClick", function(self) StaticPopup_Show("PTT_ADD_TAG","new") end)

    createSortedIndex(1)

    --PanelTemplates_SetNumTabs(PTMainFrame, 3)
    --PanelTemplates_SetTab(PTMainFrame, 1)

    PTMainFrame:Show()
end











--编辑标签框
StaticPopupDialogs["PTT_EDIT_TAG"] = {

    preferredIndex = STATICPOPUPS_NUMDIALOGS,
    text           = "编辑标签： |cffffff00%s",
    maxLetters     = 27,
    hasEditBox	   = 1,
    editBoxWidth   = 350,
    whileDead      = 1,
    button1        = "保存",
    button2        = "取消",




    OnShow = function(self)


        if PTTSystemTagList[addServer(self.text["text_arg1"])]  and not PTTSystemTagList[addServer(GetUnitName("player"))] then
            ShowMsg("|cffffff00千古 |cffffffff提示：你无法对 "..self.text["text_arg1"].." 添加标签")
            self:Hide()
        elseif PlayTagDB.playTagMap[addServer(self.text["text_arg1"])] then
            --print(self.text["text_arg1"])
            self.editBox:SetText(PlayTagDB.playTagMap[addServer(self.text["text_arg1"])])
        else
            self.editBox:SetText("")

        end
        self.editBox:SetFocus()

    end,
    OnAccept = function(self)
        if not PlayTagDB.playTagMap[addServer(self.text["text_arg1"])] then
            table.insert(PlayTagDB.playerList,addServer(self.text["text_arg1"]))
        end
        PlayTagDB.playTagMap[addServer(self.text["text_arg1"])] = self.editBox:GetText()
        --print(addServer(self.text["text_arg1"]).."    "..date("%Y-%m-%d %H:%M:%S"))

        PlayTagDB.playerDateMap[addServer(self.text["text_arg1"])]=date("%Y-%m-%d %H:%M:%S")
        --貌似是列表界面更新
        if PTMainFrame ~= nil then
            createSortedIndex(PTScrollType)
            --PTMainFrame:Show()
        end

        if PlayTagDB.playerBnetMap[addServer(self.text["text_arg1"])] then
            local battleTag=PlayTagDB.playerBnetMap[addServer(self.text["text_arg1"])]
            PlayTagDB.bnetPlayerMap[battleTag][addServer(self.text["text_arg1"])]=self.editBox:GetText()
        end

    end,
    EditBoxOnEnterPressed = function(self)
        --local tmpname = self:GetParent().editBox:GetText()
        if not PlayTagDB.playTagMap[addServer(self:GetParent().text["text_arg1"])] then
            table.insert(PlayTagDB.playerList,addServer(self:GetParent().text["text_arg1"]))
        end
        PlayTagDB.playTagMap[addServer(self:GetParent().text["text_arg1"])] = self:GetParent().editBox:GetText()
        --print(addServer(self.text["text_arg1"]).."    "..date("%Y-%m-%d %H:%M:%S"))
        PlayTagDB.playerDateMap[addServer(self:GetParent().text["text_arg1"])]=date("%Y-%m-%d %H:%M:%S")
        self:GetParent():Hide()

        if PTMainFrame ~= nil then
            createSortedIndex(PTScrollType)
            --PTMainFrame:Show()
        end
        if PlayTagDB.playerBnetMap[addServer(self.text["text_arg1"])] then
            local battleTag=PlayTagDB.playerBnetMap[addServer(self.text["text_arg1"])]
            PlayTagDB.bnetPlayerMap[battleTag][addServer(self.text["text_arg1"])]=self.editBox:GetText()
        end
    end,
    EditBoxOnEscapePressed = function(self)
        self:GetParent():Hide()
    end

}



--邀请提醒框
StaticPopupDialogs["PARTY_INVITE_WARN"] = {

    preferredIndex = STATICPOPUPS_NUMDIALOGS,
    text           = "警告：来自存在负面评价玩家的邀请：\n\n|cffffff00%s : %s",
    --maxLetters     = 30,
    hasEditBox	   = false,
    whileDead      = 1,
    button1        = "接受",
    button2        = "拒绝",



    OnShow = function()

       -- print("邀请警告展示")
    end,
    OnAccept = function()

        AcceptGroup()

    end,

    OnCancel = function()

        DeclineGroup()

        StaticPopup_Hide("PARTY_INVITE_WARN")

    end



}





--编辑标签框
StaticPopupDialogs["PTT_ADD_TAG"] = {

    preferredIndex = STATICPOPUPS_NUMDIALOGS,
    text           = "新增玩家标签\n\n|cffffff00格式：角色名 标签内容",
    maxLetters     = 30,
    hasEditBox	   = 1,
    editBoxWidth   = 350,
    whileDead      = 1,
    button1        = "保存",
    button2        = "取消",



    OnShow = function(self)

        self.editBox:SetFocus()


    end,
    OnAccept = function(self)

        local nameTag = self.editBox:GetText()
        local name = getNameFromNameTag(nameTag)
        local tag  = getTagFromNameTag(nameTag)


        if (not name or PTTSystemNotTagList[addServer(name)]) and not PTTSystemTagList[addServer(GetUnitName("player"))] then
            ShowMsg("|cffffff00千古 |cffffffff提示：你无法对 "..name.." 添加标签")
            self:Hide()
            return

        end

        if not PlayTagDB.playTagMap[addServer(name)] then
            table.insert(PlayTagDB.playerList,addServer(name))
        end
        PlayTagDB.playTagMap[addServer(name)] = tag
        --print(addServer(self.text["text_arg1"]).."    "..date("%Y-%m-%d %H:%M:%S"))

        PlayTagDB.playerDateMap[addServer(name)]=date("%Y-%m-%d %H:%M:%S")


        --更新战网标记
        if PlayTagDB.playerBnetMap[addServer(name)] then
            local battleTag=PlayTagDB.playerBnetMap[addServer(name)]
            PlayTagDB.bnetPlayerMap[battleTag][addServer(name)]=tag
        end


        --貌似是列表界面更新
        if PTMainFrame ~= nil then
            createSortedIndex(PTScrollType)
            --PTMainFrame:Show()
        end



    end,

    EditBoxOnEnterPressed = function(self)
        return

    end,
    EditBoxOnEscapePressed = function(self)
        self:GetParent():Hide()
    end

}


 function PTTupdatePlayerBnetID()



    local total, online = BNGetNumFriends()

    for i = 1, online do

        local _,_,battleTag,_,characterName,bnetIDGameAccount,client,_,_,_,_,_,noteText = BNGetFriendInfo(i)



        if characterName then


            if not PlayTagDB.bnetPlayerMap[battleTag] or not PlayTagDB.bnetPlayerMap[battleTag][addServer(characterName)] then

                if not PlayTagDB.bnetPlayerMap[battleTag] then
                    PlayTagDB.bnetPlayerMap[battleTag]={}
                end


                --print(addServer(characterName))
                local characterTag=""
                if PlayTagDB.playTagMap[addServer(characterName)] then
                    characterTag=PlayTagDB.playTagMap[addServer(characterName)]
                end


                --todo:新增、更新标签时需要更新数据
                PlayTagDB.bnetPlayerMap[battleTag][addServer(characterName)]=characterTag
                PlayTagDB.playerBnetMap[addServer(characterName)]=battleTag

                --print(battleTag,addServer(characterName))


            end




        end

    end

end






local function PTTGetCurrentRoleByBnet()



    local total, online = BNGetNumFriends()

    for i = 1, online do

        local _,_,battleTag,_,characterName,bnetIDGameAccount,client,_,_,_,_,_,noteText = BNGetFriendInfo(i)

        if characterName then
            currentBnetRole[battleTag]=characterName
            --print(battleTag,characterName)

        end

    end

end









function PTTGUI()

    --updatePlayerClass()  --没有优雅的实现方式，暂时放弃
    PTTupdatePlayerBnetID()
    PTTGetCurrentRoleByBnet()
    PTTCreateUIFrames()
end